<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Encryption &amp; Decryption on ABDM Sandbox Documentation</title><link>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/index.html</link><description>Recent content in Encryption &amp; Decryption on ABDM Sandbox Documentation</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 11 Apr 2023 05:10:00 +0530</lastBuildDate><atom:link href="http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/index.xml" rel="self" type="application/rss+xml"/><item><title>For Java</title><link>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/java/index.html</link><pubDate>Thu, 13 Apr 2023 05:10:00 +0530</pubDate><guid>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/java/index.html</guid><description>For Java Derived form Fidelius Charm, a magic spell that can conceal secrets.
In the context of projectEka, this is a reference service that does the following
Generates key Parameters (Private key, Public key and nonce). For HIP encrypt given data based on the key parameters passed and give public key in a format that can be shared with the HIU. For HIU decrypt the data based on the key parameters passed How to run</description></item><item><title>For Command Line</title><link>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/command-line/index.html</link><pubDate>Thu, 13 Apr 2023 05:10:00 +0530</pubDate><guid>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/command-line/index.html</guid><description>For Command Line The core logic for Fidelius CLI 59 has been excerpted from (and improved upon) this SpringBoot project 14 (with the same name, which has been used in some form, in the webinar demos).
A few of the core improvements include:
A CLI implementation, which can be easily integrated into any tech stack without much overhead
An expansive, well thought-out set of APIs
The encryption/decryption commands also accept public keys in X509 format The latest Fidelius CLI release (v1.</description></item><item><title>For C#</title><link>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/for-c-hash/index.html</link><pubDate>Thu, 13 Apr 2023 05:10:00 +0530</pubDate><guid>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/for-c-hash/index.html</guid><description>For C# This sample code illustrates below mention feature:
Diffie Hillman key exchange HKDF Aes encryption and decryption Tech used:
BouncyCastle C# dotnet namespace In.ProjectEKA.HipService.EncryptionBit { using System; using System.Collections.Generic; using System.Linq; using System.Security.Cryptography; using System.Text; using Org.BouncyCastle.Crypto; using Org.BouncyCastle.Crypto.Digests; using Org.BouncyCastle.Crypto.EC; using Org.BouncyCastle.Crypto.Engines; using Org.BouncyCastle.Crypto.Generators; using Org.BouncyCastle.Crypto.Modes; using Org.BouncyCastle.Crypto.Parameters; using Org.BouncyCastle.Pkcs; using Org.BouncyCastle.Security; using Encoder = Org.BouncyCastle.Utilities.Encoders; public class EncrytorDemo { private readonly string CURVE = &amp;quot;curve25519&amp;quot;; private readonly string ALGORITHM = &amp;quot;ECDH&amp;quot;; private readonly string StrToPerformActionOn = &amp;quot;SomeValue&amp;quot;; public void SetUpDemo() { // Generating key pairs var receiverKeyPair = GenerateKey(); var receiverPublicKey = GetPublicKey(receiverKeyPair); var receiverPrivateKey = GetPrivateKey(receiverKeyPair); var senderKeyPair = GenerateKey(); var senderPublicKey = GetPublicKey(senderKeyPair); var senderPrivateKey = GetPrivateKey(senderKeyPair); // Generating random key var randomKeySender = GenerateRandomKey(); var randomKeyReceiver = GenerateRandomKey(); // Generating XOR array for getting the salt and IV used for encryption var xorOfRandoms = XorOfRandom(randomKeySender, randomKeyReceiver).</description></item><item><title>New Prog. Language</title><link>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/new-prog-language/index.html</link><pubDate>Thu, 13 Apr 2023 05:10:00 +0530</pubDate><guid>http://kiranma72.github.io/abdm-docs/3-milestone2/encryption-decryption/new-prog-language/index.html</guid><description>For New Programming Language The following abbreviations are used in this section:
ECDH: Elliptic-curve Diffie–Hellman Key Exchange AES-GCM: Advanced Encryption Standard-Galois/Counter Mode DHPK: Elliptic-curve Diffie–Hellman public key DHSK: Elliptic-curve Diffie–Hellman secret/private key P and U is annotation for system DHK(U,P): Elliptic-curve Diffie–Hellman Key Rand: Random String Information shared as part of the data flow will be secured using an encryption mechanism that ensures perfect forward secrecy.
This means that even if any of the key materials stored at HIPs, HIUs or HDCM clients (either long-term private keys or session keys) are compromised, it would not be possible to decipher data that was previously exchanged.</description></item></channel></rss>